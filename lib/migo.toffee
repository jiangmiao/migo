pg = require 'pg'
fs = require 'fs'
readline = require 'readline'
chalk = require 'chalk'
rl = readline.createInterface input: process.stdin, output: process.stdout

ok = (e) ->
    if e
        pe e.message ? e
        rl.close()
        process.exit(1)

p = ->
    console.log arguments...

pe = (err) ->
    p chalk.red(err)

indent = (l) ->
    l.replace(/(^|\n)/g, "$&\t")

class DB
    open: (conn, autocb) ->
        if typeof(conn) != 'object'
            conn.database ?= conn.dbname
            conn.ssl ?= conn.sslmode
        @db = new pg.Client(conn)
        @db.connect!

    close: (autocb) ->
        @db.end()

    q: ->
        @query arguments...

    drop: (n, autocb) ->
        @q! """
            DROP TABLE IF EXISTS #{n}_migo_deleted;
            ALTER TABLE #{n} RENAME TO #{n}_migo_deleted;
        """
    query: (command, params..., autocb) ->
        ###
        if m = command.match /(BEGIN|COMMIT|ROLLBACK)/
            # p "[#{m[1]}]"
        else
            log = command
            if params.length
                log += "\n\n    " + params
            p log
        ###
        ok @db.query! command, params

    begin: (autocb) ->
        @query! "BEGIN"

    commit: (autocb) ->
        @query! "COMMIT"

    rollback: (autocb) ->
        @query! "ROLLBACK"

init = (conn) ->
    migs = []
    db = null
    id = 0

    _migrate = (args, autocb) ->
        [last_id] = args
        if last_id
            last_id = parseInt(last_id, 10)
        else
            last_id = Infinity

        _, id = fs.readFile!('migo.id', 'UTF-8')
        id ?= 0
        id = parseInt(id, 10)

        p "FROM: #{id}"
        p "TO:   #{last_id}"
        while id != last_id
            if id < last_id
                ward = 'up'
                nid = id + 1
                mig = migs[nid-1]
                ws = 'U'
                color = chalk.green
            else
                ward = 'down'
                nid = id - 1
                mig = migs[nid]
                ws = 'D'
                color = chalk.yellow
            if !mig
                break
            [name, fns] = mig
            p color "#{id} #{ws} ---- #{name} ----"
            fn = fns[ward]
            p ""
            p fn
            p ""
            if ward == 'down'
                answer = rl.question! 'Are you sure? (yes/y/no/n) '
                p ""
                unless answer.match(/^(y|yes)$/)
                    die 'procedure terminated.'
            if fn
                if typeof fn == 'string'
                    ((autocb)->
                        @q! fn
                        @
                    ).call! db
                else
                    fn.call! db
            id = nid

    _begin = (autocb) ->
        db ?= new DB()
        ok db.open! conn
        ok db.begin!

    _rollback = (autocb) ->
        ok db.rollback!
        ok db.close!
        rl.close()

    _commit = (autocb) ->
        ok db.commit!
        ok fs.writeFile!('migo.id', id, 'UTF-8')
        ok db.close!
        rl.close()

    add = (name, fns) ->
        migs.push [name, fns]

    migrate = (args..., autocb) ->
        _begin!
        _migrate! args
        _commit!
        p chalk.green 'COMMIT'

    pretend = (args..., autocb) ->
        _begin!
        _migrate! args
        _rollback!
        p chalk.red 'ROLLBACK'

    parseFile = (fileName, autocb) ->
        err, data = fs.readFile! fileName, 'UTF-8'
        ok err
        ms = data.split /(?:^|\n)#(\d+)(.*)/
        i = 0
        ms.shift()
        j = 1
        while ms[i]?
            id = parseInt(ms[i], 10)
            if j != id
                ok("id is not increase")
            j++
            title = ms[i+1]
            body = ms[i+2]
            [up, down] = body.split /(?:^|\n)--/
            down ?= ''
            up = '    '+up.trim()
            down = '    '+down.trim()
            add title, {up, down}
            i += 3
        @
    {add, pretend, migrate, parseFile}

close = ->
    rl.close()
module.exports = {init, close}
