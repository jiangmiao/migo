// Generated by ToffeeScript 1.6.3-4
(function() {
  var DB, chalk, fs, pg, readline, rl,
    __slice = [].slice;

  pg = require('pg');

  fs = require('fs');

  readline = require('readline');

  rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.on('SIGINT', function() {
    return process.exit(1);
  });

  function ok(e) {
    var _ref;
    if (e) {
      pe((_ref = e.message) != null ? _ref : e);
      rl.close();
      return process.exit(1);
    }
  };

  function p() {
    return console.log.apply(console, arguments);
  };

  function pe(err) {
    if (err) {
      return p(chalk.red(err));
    }
  };

  chalk = (function() {
    function color(x, v) {
      return "\x1b[" + x + "m" + v + "\x1b[0m";
    };
    return {
      red: function(v) {
        return color('0;31', v);
      },
      green: function(v) {
        return color('0;32', v);
      },
      yellow: function(v) {
        return color('0;33', v);
      }
    };
  })();

  function indent(l) {
    return l.replace(/(^|\n)/g, "$&\t");
  };

  DB = (function() {
    function DB() {}

    DB.prototype.open = function(conn, autocb) {
      var _this = this;
      if (typeof conn === 'object') {
        if (conn.database == null) {
          conn.database = conn.dbname;
        }
        if (conn.ssl == null) {
          conn.ssl = conn.sslmode;
        }
      }
      this.db = new pg.Client(conn);
      this.db.connect(function(_$$_9) {
        autocb(_$$_9);
      });
    };

    DB.prototype.close = function(autocb) {
      autocb(this.db.end());
    };

    DB.prototype.q = function() {
      return this.query.apply(this, arguments);
    };

    DB.prototype.drop = function(n, autocb) {
      var _this = this;
      this.q("DROP TABLE IF EXISTS " + n + "_migo_deleted;\nALTER TABLE " + n + " RENAME TO " + n + "_migo_deleted;", function(_$$_10) {
        autocb(_$$_10);
      });
    };

    DB.prototype.query = function() {
      var autocb, command, params, _i,
        _this = this;
      command = arguments[0], params = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), autocb = arguments[_i++];

      /*
      if m = command.match /(BEGIN|COMMIT|ROLLBACK)/
          # p "[#{m[1]}]"
      else
          log = command
          if params.length
              log += "\n\n    " + params
          p log
      */
      this.db.query(command, params, function(_$$_0) {
        autocb(ok(_$$_0));
      });
    };

    DB.prototype.begin = function(autocb) {
      var _this = this;
      this.query("BEGIN", function(_$$_11) {
        autocb(_$$_11);
      });
    };

    DB.prototype.commit = function(autocb) {
      var _this = this;
      this.query("COMMIT", function(_$$_12) {
        autocb(_$$_12);
      });
    };

    DB.prototype.rollback = function(autocb) {
      var _this = this;
      this.query("ROLLBACK", function(_$$_13) {
        autocb(_$$_13);
      });
    };

    return DB;

  })();

  function init(conn) {
    var db, id, migs;
    migs = [];
    db = null;
    id = 0;
    function _migrate(args, autocb) {
      var answer, cid, color, fn, fns, last_id, mig, name, nid, ward, ws, _,
        _this = this;
      last_id = args[0];
      if (last_id) {
        last_id = parseInt(last_id, 10);
      } else {
        last_id = Infinity;
      }
      fs.readFile('migo.id', 'UTF-8', function() {
        var _$res$_1;
        _ = arguments[0], id = arguments[1];
        if (id == null) {
          id = 0;
        }
        id = parseInt(id, 10);
        p("FROM: " + id);
        p("TO:   " + last_id);
        _$res$_1 = [];
        function _body() {
          if (id !== last_id) {
            if (id < last_id) {
              ward = 'up';
              nid = id + 1;
              mig = migs[nid - 1];
              cid = nid;
              ws = 'U';
              color = chalk.green;
            } else {
              ward = 'down';
              nid = id - 1;
              mig = migs[nid];
              cid = id;
              ws = 'D';
              color = chalk.yellow;
            }
            if (!mig) {
              return _done();
            }
            name = mig[0], fns = mig[1];
            p(color("" + cid + " " + ws + " ---- " + name + " ----"));
            fn = fns[ward];
            p("");
            p(fn);
            p("");
            if (ward === 'down') {
              rl.question('Are you sure? (yes/y/no/n) ', function() {
                answer = arguments[0];
                p("");
                if (!answer.match(/^(y|yes)$/)) {
                  ok(new Error('procedure terminated.'));
                }
                _$$_3();
              });
            } else {
              _$$_3();
            }
            function _$$_3() {
              if (fn) {
                if (typeof fn === 'string') {
                  (function(autocb) {
                    var _this = this;
                    this.q(fn, function() {
                      autocb(_this);
                    });
                  }).call(db, function() {
                    _$$_2();
                  });
                } else {
                  fn.call(db, function() {
                    _$$_2();
                  });
                }
              } else {
                _$$_2();
              }
              function _$$_2() {
                _body(_$res$_1.push(id = nid));
              };
            };
          } else {
            _done();
          }
        };
        function _done() {
          autocb(_$res$_1);
        };
        _body();
      });
    };
    function _begin(autocb) {
      var _this = this;
      if (db == null) {
        db = new DB();
      }
      db.open(conn, function(_$$_4) {
        ok(_$$_4);
        db.begin(function(_$$_5) {
          autocb(ok(_$$_5));
        });
      });
    };
    function _rollback(autocb) {
      var _this = this;
      db.rollback(function(_$$_6) {
        ok(_$$_6);
        db.close(function() {
          autocb(rl.close());
        });
      });
    };
    function _commit(autocb) {
      var _this = this;
      db.commit(function(_$$_7) {
        ok(_$$_7);
        fs.writeFile('migo.id', id, 'UTF-8', function(_$$_8) {
          ok(_$$_8);
          db.close(function() {
            autocb(rl.close());
          });
        });
      });
    };
    function add(name, fns) {
      return migs.push([name, fns]);
    };
    function migrate() {
      var args, autocb, _i,
        _this = this;
      args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), autocb = arguments[_i++];
      _begin(function() {
        _migrate(args, function() {
          _commit(function() {
            autocb(p(chalk.green('COMMIT')));
          });
        });
      });
    };
    function pretend() {
      var args, autocb, _i,
        _this = this;
      args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), autocb = arguments[_i++];
      _begin(function() {
        _migrate(args, function() {
          _rollback(function() {
            autocb(p(chalk.red('ROLLBACK')));
          });
        });
      });
    };
    function parseFile(fileName, autocb) {
      var body, data, down, err, i, j, ms, title, up,
        _this = this;
      fs.readFile(fileName, 'UTF-8', function() {
        var _ref;
        err = arguments[0], data = arguments[1];
        ok(err);
        ms = data.split(/(?:^|\n)#(\d+)(.*)/);
        i = 0;
        ms.shift();
        j = 1;
        while (ms[i] != null) {
          id = parseInt(ms[i], 10);
          if (j !== id) {
            ok("id is not increase");
          }
          j++;
          title = ms[i + 1];
          body = ms[i + 2];
          _ref = body.split(/(?:^|\n)--/), up = _ref[0], down = _ref[1];
          if (down == null) {
            down = '';
          }
          up = '    ' + up.trim();
          down = '    ' + down.trim();
          add(title, {
            up: up,
            down: down
          });
          i += 3;
        }
        autocb(_this);
      });
    };
    return {
      add: add,
      pretend: pretend,
      migrate: migrate,
      parseFile: parseFile
    };
  };

  function close() {
    return rl.close();
  };

  module.exports = {
    init: init,
    close: close,
    ok: ok
  };

}).call(this);
