// Generated by ToffeeScript 1.6.3-4
(function() {
  var DB, fs, pg,
    __slice = [].slice;

  pg = require('pg');

  fs = require('fs');

  function ok(e) {
    if (e) {
      throw new Error(e);
    }
  };

  function indent(l) {
    return l.replace(/(^|\n)/g, "$&\t");
  };

  DB = (function() {
    function DB() {}

    DB.prototype.open = function(conn, autocb) {
      var _this = this;
      if (typeof conn !== 'object') {
        if (conn.dbname == null) {
          conn.dbname = conn.database;
        }
        if (conn.ssl == null) {
          conn.ssl = conn.sslmode;
        }
      }
      this.db = new pg.Client(conn);
      this.db.connect(function(_$$_10) {
        autocb(_$$_10);
      });
    };

    DB.prototype.close = function(autocb) {
      autocb(this.db.end());
    };

    DB.prototype.q = function() {
      return this.query.apply(this, arguments);
    };

    DB.prototype.drop = function(n, autocb) {
      var _this = this;
      this.q("DROP TABLE IF EXISTS " + n + "_migo_deleted;\nALTER TABLE " + n + " RENAME TO " + n + "_migo_deleted;", function(_$$_11) {
        autocb(_$$_11);
      });
    };

    DB.prototype.query = function() {
      var autocb, command, m, params, _i,
        _this = this;
      command = arguments[0], params = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), autocb = arguments[_i++];
      if (m = command.match(/(BEGIN|COMMIT|ROLLBACK)/)) {

      } else {
        p(indent(command), params);
      }
      this.db.query(command, params, function(_$$_0) {
        autocb(ok(_$$_0));
      });
    };

    DB.prototype.begin = function(autocb) {
      var _this = this;
      this.query("BEGIN", function(_$$_12) {
        autocb(_$$_12);
      });
    };

    DB.prototype.commit = function(autocb) {
      var _this = this;
      this.query("COMMIT", function(_$$_13) {
        autocb(_$$_13);
      });
    };

    DB.prototype.rollback = function(autocb) {
      var _this = this;
      this.query("ROLLBACK", function(_$$_14) {
        autocb(_$$_14);
      });
    };

    return DB;

  })();

  function p() {
    return console.log.apply(console, arguments);
  };

  function init(conn) {
    var db, id, migs;
    migs = [];
    db = null;
    id = 0;
    function _migrate(args, autocb) {
      var fn, fns, last_id, mig, name, nid, ward, ws, _,
        _this = this;
      last_id = args[0];
      if (last_id) {
        last_id = parseInt(last_id, 10);
      } else {
        last_id = Infinity;
      }
      fs.readFile('migo.id', 'UTF-8', function() {
        var _$res$_1;
        _ = arguments[0], id = arguments[1];
        if (id == null) {
          id = 0;
        }
        id = parseInt(id, 10);
        p("FROM: " + id);
        p("TO:   " + last_id);
        _$res$_1 = [];
        function _body() {
          if (id !== last_id) {
            if (id < last_id) {
              ward = 'up';
              nid = id + 1;
              mig = migs[nid - 1];
              ws = '^';
            } else {
              ward = 'down';
              nid = id - 1;
              mig = migs[nid];
              ws = 'v';
            }
            if (!mig) {
              return _done();
            }
            name = mig[0], fns = mig[1];
            p("" + id + " " + ws + " ---- " + name + " ----");
            p("");
            fn = fns[ward];
            if (fn) {
              if (typeof fn === 'string') {
                (function(autocb) {
                  var _this = this;
                  this.q(fn, function() {
                    autocb(_this);
                  });
                }).call(db, function() {
                  _$$_2();
                });
              } else {
                fn.call(db, function() {
                  _$$_2();
                });
              }
            } else {
              _$$_2();
            }
            function _$$_2() {
              id = nid;
              _body(_$res$_1.push(p("")));
            };
          } else {
            _done();
          }
        };
        function _done() {
          autocb(_$res$_1);
        };
        _body();
      });
    };
    function _begin(autocb) {
      var _this = this;
      if (db == null) {
        db = new DB();
      }
      db.open(conn, function(_$$_3) {
        ok(_$$_3);
        db.begin(function(_$$_4) {
          autocb(ok(_$$_4));
        });
      });
    };
    function _rollback(autocb) {
      var _this = this;
      db.rollback(function(_$$_5) {
        ok(_$$_5);
        db.close(function(_$$_6) {
          autocb(ok(_$$_6));
        });
      });
    };
    function _commit(autocb) {
      var _this = this;
      db.commit(function(_$$_7) {
        ok(_$$_7);
        fs.writeFile('migo.id', id, 'UTF-8', function(_$$_8) {
          ok(_$$_8);
          db.close(function(_$$_9) {
            autocb(ok(_$$_9));
          });
        });
      });
    };
    function add(name, fns) {
      return migs.push([name, fns]);
    };
    function migrate() {
      var args, autocb, _i,
        _this = this;
      args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), autocb = arguments[_i++];
      _begin(function() {
        _migrate(args, function() {
          _commit(function(_$$_15) {
            autocb(_$$_15);
          });
        });
      });
    };
    function pretend() {
      var args, autocb, _i,
        _this = this;
      args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), autocb = arguments[_i++];
      _begin(function() {
        _migrate(args, function() {
          _rollback(function(_$$_16) {
            autocb(_$$_16);
          });
        });
      });
    };
    return {
      add: add,
      pretend: pretend,
      migrate: migrate
    };
  };

  module.exports = {
    init: init
  };

}).call(this);
